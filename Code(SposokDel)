<template>
  <div id="app">
    <div class="app-container">
      <header class="app-header">
        <div class="header-content">
          <h1 class="app-title">
            <span class="title-icon">üòê</span>
            MY TO-DO LIST
          </h1>
          <p class="app-subtitle">YoPR</p>
        </div>
      </header>

      <main class="main-content">
        <div class="tasks-stats">
          <div class="stat-card">
            <span class="stat-number">{{ tasks.length }}</span>
            <span class="stat-label">Total tasks</span>
          </div>
          <div class="stat-card">
            <span class="stat-number">{{ completedTasks }}</span>
            <span class="stat-label">Done</span>
          </div>
        </div>

        <div class="tasks-grid">
          <TaskItem 
            v-for="task in tasks" 
            :key="task.id" 
            :task="task"
            class="task-item"
          />
        </div>
      </main>

      <footer class="app-footer">
        <p>¬© 2025 CA-422K ‚Ä¢ Made by Andrew Yokai>< </p>
      </footer>
    </div>
  </div>
</template>

<script>
import TaskItem from './components/TaskItem.vue'

export default {
  name: 'App',
  components: {
    TaskItem
  },
  data() {
    return {
      tasks: [
        {
          id: 1,
          title: '–°—ã–≥—Ä–∞—Ç—å 20–º–º–æ–≤ –≤ –¥–æ—Ç—É',
          text: '–° –±–æ–ª—å—é',
          completed: true,
          priority: 'medium',
        },
        {
          id: 2,
          title: '–ü–æ–ø–∏—Ç—å –∫–æ—Ñ–µ',
          text: '–í –∫–æ—Ñ–µ–π–Ω–µ',
          completed: true,
          priority: 'low',
        },
        {
          id: 3,
          title: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –º–Ω–µ 5',
          text: '–ê —Ç–∞–∫ –∂–µ –∑–∞ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã',
          completed: false,
          priority: 'high',
        },
        {
          id: 4,
          title: '–°—Ö–æ–¥–∏—Ç—å –≤ –∫–æ–ª–ª–µ–¥–∂',
          text: '(–ø–æ –∂–µ–ª–∞–Ω–∏—é)',
          completed: true,
          priority: 'high',
        },
      ]
    }
  },
  computed: {
    completedTasks() {
      return this.tasks.filter(task => task.completed).length
    }
  }
}
</script>

<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --primary: #6366f1;
  --primary-dark: #4f46e5;
  --secondary: #f8fafc;
  --accent: #06d6a0;
  --text-primary: #1e293b;
  --text-secondary: #64748b;
  --border: #e2e8f0;
  --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  --radius: 16px;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: var(--text-primary);
  line-height: 1.6;
  min-height: 100vh;
}

#app {
  min-height: 100vh;
  padding: 20px;
}

.app-container {
  max-width: 1200px;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20px);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  overflow: hidden;
  min-height: calc(100vh - 40px);
  display: flex;
  flex-direction: column;
}

.app-header {
  background: linear-gradient(135deg, var(--primary), var(--primary-dark));
  color: white;
  padding: 40px 0;
  text-align: center;
}

.header-content {
  max-width: 600px;
  margin: 0 auto;
  padding: 0 20px;
}

.app-title {
  font-size: 3rem;
  font-weight: 800;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
}

.title-icon {
  font-size: 2.5rem;
}

.app-subtitle {
  font-size: 1.2rem;
  opacity: 0.9;
  font-weight: 400;
}

.main-content {
  flex: 1;
  padding: 40px;
}

.tasks-stats {
  display: flex;
  gap: 20px;
  margin-bottom: 40px;
  justify-content: center;
}

.stat-card {
  background: white;
  padding: 24px;
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  text-align: center;
  min-width: 140px;
  border: 1px solid var(--border);
  transition: transform 0.2s ease;
}

.stat-card:hover {
  transform: translateY(-2px);
}

.stat-number {
  display: block;
  font-size: 2.5rem;
  font-weight: 800;
  color: var(--primary);
  line-height: 1;
}

.stat-label {
  font-size: 0.9rem;
  color: var(--text-secondary);
  font-weight: 500;
}

.tasks-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 24px;
}

.task-item {
  transition: all 0.3s ease;
}

.task-item:hover {
  transform: translateY(-4px);
}

.app-footer {
  background: var(--secondary);
  padding: 24px;
  text-align: center;
  border-top: 1px solid var(--border);
  color: var(--text-secondary);
  font-size: 0.9rem;
}

@media (max-width: 768px) {
  .app-title {
    font-size: 2.2rem;
  }
  
  .main-content {
    padding: 24px;
  }
  
  .tasks-stats {
    flex-direction: column;
    align-items: center;
  }
  
  .stat-card {
    width: 100%;
    max-width: 200px;
  }
  
  .tasks-grid {
    grid-template-columns: 1fr;
  }
  
  #app {
    padding: 10px;
  }
}

@media (max-width: 480px) {
  .app-title {
    font-size: 1.8rem;
    flex-direction: column;
    gap: 8px;
  }
  
  .main-content {
    padding: 16px;
  }
}
</style>

. . . . . . . .
components/TaskItem.vue
. . . . . . . . 


<template>
  <div class="task-card" :class="cardClasses">
    <div class="task-card__header">
      <div class="task-meta">
        <span class="task-category">{{ task.category }}</span>
        <span class="task-priority" :class="priorityClass">{{ priorityText }}</span>
      </div>
      <div class="task-actions">
        <button 
          class="task-checkbox" 
          :class="{ 'task-checkbox--completed': task.completed }"
          @click="toggleTask"
        >
          <span class="checkmark">‚úì</span>
        </button>
      </div>
    </div>

    <div class="task-card__body">
      <h3 class="task-title" :class="{ 'task-title--completed': task.completed }">
        {{ task.title }}
      </h3>
      <p class="task-text">{{ task.text }}</p>
    </div>

    <div class="task-card__footer">
      <div class="task-id">#{{ task.id }}</div>
      <div class="task-status">
        <span class="status-badge" :class="statusClass">
          {{ task.completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' }}
        </span>
      </div>
    </div>

    <div class="task-progress" :class="progressClass"></div>
  </div>
</template>

<script>
export default {
  name: 'TaskItem',
  props: {
    task: {
      type: Object,
      required: true
    }
  },
  computed: {
    cardClasses() {
      return {
        'task-card--completed': this.task.completed,
        'task-card--high-priority': this.task.priority === 'high',
        'task-card--medium-priority': this.task.priority === 'medium',
        'task-card--low-priority': this.task.priority === 'low'
      }
    },
    priorityClass() {
      return `task-priority--${this.task.priority}`
    },
    priorityText() {
      const priorities = {
        high: '–í—ã—Å–æ–∫–∏–π',
        medium: '–°—Ä–µ–¥–Ω–∏–π',
        low: '–ù–∏–∑–∫–∏–π'
      }
      return priorities[this.task.priority]
    },
    statusClass() {
      return this.task.completed ? 'status-badge--completed' : 'status-badge--pending'
    },
    progressClass() {
      return this.task.completed ? 'task-progress--completed' : ''
    }
  },
  methods: {
    toggleTask() {
      console.log(`Toggling task ${this.task.id}`)
    }
  }
}
</script>

<style scoped>
.task-card {
  background: white;
  border-radius: var(--radius);
  padding: 24px;
  box-shadow: var(--shadow);
  border: 1px solid var(--border);
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.task-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: var(--primary);
  transition: all 0.3s ease;
}

.task-card--high-priority::before {
  background: #ef4444;
}

.task-card--medium-priority::before {
  background: #f59e0b;
}

.task-card--low-priority::before {
  background: #10b981;
}

.task-card--completed::before {
  background: var(--accent);
}

.task-card:hover {
  box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.15);
  border-color: var(--primary);
}

.task-card--completed {
  opacity: 0.8;
  background: linear-gradient(135deg, #f8fafc, #f1f5f9);
}

.task-card__header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 16px;
}
